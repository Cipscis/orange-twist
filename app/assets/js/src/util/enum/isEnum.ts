/**
 * A utility function for creating custom typeguards for enums.
 *
 * Works with enums created using TypeScript's `enum` keyword, and
 * with enums created using JavaScript objects.
 *
 * The generated function also takes an optional second argument, which can
 * be useful when used within a more complex typeguard function such as those
 * generated by [TypeGuardian](https://github.com/Cipscis/typeguardian).
 *
 * **Warning** If using the `enum` keyword to create a numeric enum, be aware that
 * TypeScript creates reverse lookups in these enums, which means it
 * will include your key strings as values of the enum.
 *
 * {@link https://www.typescriptlang.org/play?#code/KYOwrgtgBAsgngUXNA3gKCpqBpBBNKAXigEYAaDLAZQQGEB5AOQBEB9XA4gJgoF800AekFQ8AezBQIASwDmACwAuUYAA8ADsADGyxfOkBnKIrFQARsCgADANrkoXALpW0WsSAPLQkAGoBDABswYCNiejMAK21FADoAN0DggwAKeCRIAEoAbgFhKAAhMGVpRQByIz8dMECAuGsbUo5SsihSmgYWdnxm0hanFzcPMQDgGICxWWTvCH8gkOzckQAVfSNDc20-MANgFoAzMQAnKE9D6RBZFWQjA00taT3pLRq4FqW4TSotM-VlQINTDtFEYwOooIdgHFgIcdlBxmIANaggwxITLVZQADuEgCABM4cBlHAJFBcaY9OdZEYAtIEZZxrJZJSoBJlFY0sgbNNZsEAGKHMQQXlgEA6aTuACCh1kkFAimcxjEaKgskJUD8ICukCgCTm5SgdLqfgqJ0UZwuLTMRSgJQJflxRgpjox6hKexq6qMmOAAQCqOVAFUDMzTszphU4mJpA7jC63TUYlAqKYySEoNtmQApPwJL4-ZRiSLRNYeRTAe0svaxyxWaZWA3AODYw64lo0umxwwALlc7k8sEQyC4RCg6CwOHwXd6lEw7SYbA4U54aF4nqgg08OV7pa1M0SIWHYSLOni+5SHMgXAWG+GowZU2QPIP2SgeTsfUcaCAA A demonstration of this pitfall.}
 *
 * @example
 * ```typescript
 * const MyEnum = {
 *     KEY: 'value',
 *     SECOND_KEY: 'other value',
 * } as const;
 * type MyEnum = EnumTypeOf<typeof MyEnum>;
 *
 * const isMyEnum = isEnum(MyEnum);
 *
 * // It can be used to check if a value exists in your enum
 * isMyEnum(MyEnum.KEY); // true
 * isMyEnum('another value'); // false
 *
 * // It can also be used for type narrowing
 * const myString: string = MyEnum.KEY; // typed as `string`
 * if (isMyEnum(myString)) {
 *     myString; // typed as `MyEnum`
 * }
 * ```
 */
export function isEnum<E>(enumArg: Record<string | number | symbol, E>): (value: unknown, errorLogger?: (message: string) => void) => value is E {
	const values = Object.values(enumArg);

	return function (value: unknown, errorLogger?: (message: string) => void): value is E {
		const isValueEnumMember = (values as unknown[]).includes(value);

		if (!isValueEnumMember && typeof errorLogger === 'function') {
			errorLogger(`Tested value was not an enum member. Saw ${String(value)}, expected one of ${values.join(', ')}.`);
		}

		return isValueEnumMember;
	};
}
